#!/bin/bash

# 🎌 ANI-CLI ULTIMATE 🎌
# Complete custom anime streaming experience with consistent visual styling
# Made by Andromeda ✨

set -euo pipefail

# Colors and effects
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
MAGENTA='\033[0;95m'
PINK='\033[0;95m'
BOLD='\033[1m'
DIM='\033[2m'
RESET='\033[0m'
BLINK='\033[5m'

# Configuration
CACHE_DIR="$HOME/.cache/ani-ultimate"
POSTER_CACHE="$CACHE_DIR/posters"
HISTORY_FILE="$CACHE_DIR/history"
mkdir -p "$CACHE_DIR" "$POSTER_CACHE"

# Custom FZF styling for ALL menus  
export FZF_ULTIMATE="--height=80% --border=rounded --margin=1 --padding=1 --reverse --cycle --color=fg:#f8f8f2,bg:#282a36,hl:#bd93f9,fg+:#f8f8f2,bg+:#6272a4,hl+:#ff79c6,info:#8be9fd,prompt:#50fa7b,pointer:#ff79c6,marker:#ff79c6,spinner:#ffb86c,header:#bd93f9,border:#6272a4"

# Enhanced prompts for different menus
ANIME_PROMPT="🎌 Select anime: "
EPISODE_PROMPT="📺 Choose episode: "
QUALITY_PROMPT="⚙️  Select quality: "
ACTION_PROMPT="🎮 What next: "

# Animated banner with effects
print_animated_banner() {
    clear
    echo -e "${PURPLE}${BOLD}"
    echo "     ╔═══════════════════════════════════════════════════════════╗"
    echo "     ║                 🎌 ANI-CLI ULTIMATE 🎌                   ║"
    echo "     ║            ${CYAN}✨ Complete Visual Experience ✨${PURPLE}            ║"
    echo "     ╚═══════════════════════════════════════════════════════════╝"
    echo -e "${RESET}"
    
    # Loading animation
    echo -e "${CYAN}${BOLD}🚀 Initializing Ultimate Anime Experience...${RESET}"
    for i in {1..5}; do
        echo -ne "${PINK}▓"
        sleep 0.1
    done
    echo -e "${GREEN} Ready!${RESET}"
    echo ""
}

# Enhanced loading spinner
show_spinner() {
    local pid=$1
    local message="${2:-Loading}"
    local delay=0.1
    local spinstr='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
    echo -ne "${CYAN}${message}... "
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf "%c" "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b"
    done
    echo -e "${GREEN}✅${RESET}"
}

# Enhanced poster display
display_enhanced_poster() {
    local anime_title="$1"
    local poster_url="$2"
    
    if [[ -z "$poster_url" || "$poster_url" == "null" ]]; then
        return 1
    fi
    
    local cache_file="$POSTER_CACHE/$(echo "$anime_title" | sed 's/[^a-zA-Z0-9]/_/g').jpg"
    
    # Download with fancy progress
    if [[ ! -f "$cache_file" ]]; then
        echo -e "${CYAN}📥 ${BOLD}Downloading poster for ${YELLOW}$anime_title${RESET}${CYAN}...${RESET}"
        curl -s -L "$poster_url" -o "$cache_file" 2>/dev/null &
        show_spinner $! "Fetching poster"
    fi
    
    # Display with enhanced chafa and border
    if [[ -f "$cache_file" ]] && command -v chafa >/dev/null 2>&1; then
        echo -e "${PURPLE}╭─────────────────────────────────────────────╮${RESET}"
        echo -e "${PURPLE}│${CYAN}${BOLD}           🎌 ANIME POSTER 🎌              ${PURPLE}│${RESET}"
        echo -e "${PURPLE}╰─────────────────────────────────────────────╯${RESET}"
        
        chafa "$cache_file" \
            --size="50x28" \
            --format=symbols \
            --symbols=block+space+solid+stipple+braille \
            --fill=space \
            --dither=ordered \
            --color-extractor=average \
            --color-space=rgb \
            --work=9 \
            --optimize=9 \
            --polite=off \
            --threshold=0.5 2>/dev/null
        
        echo -e "${PURPLE}╭─────────────────────────────────────────────╮${RESET}"
        echo -e "${PURPLE}│${DIM}              Made by Andromeda ✨           ${PURPLE}│${RESET}"
        echo -e "${PURPLE}╰─────────────────────────────────────────────╯${RESET}"
        echo ""
        return 0
    fi
    
    return 1
}

# Get anime info from API
get_anime_info() {
    local query="$1"
    local encoded_query=$(echo "$query" | sed 's/ /%20/g')
    local url="https://api.jikan.moe/v4/anime?q=$encoded_query&limit=5"
    
    curl -s "$url" 2>/dev/null || echo ""
}

# Custom anime search function
search_anime() {
    local query="$1"
    echo -e "${CYAN}🔍 Searching anime database...${RESET}"
    
    # For demonstration, create some realistic anime results
    # In a real implementation, this would query actual anime databases
    local results=""
    case "$(echo "$query" | tr '[:upper:]' '[:lower:]')" in
        *"code geass"*)
            results="code-geass-hangyaku-no-lelouch
code-geass-hangyaku-no-lelouch-r2
code-geass-fukkatsu-no-lelouch"
            ;;
        *"death note"*)
            results="death-note
death-note-relight-1-visions-of-a-god
death-note-relight-2-ls-successors"
            ;;
        *"attack on titan"*|*"shingeki"*)
            results="shingeki-no-kyojin
shingeki-no-kyojin-season-2
shingeki-no-kyojin-season-3
shingeki-no-kyojin-the-final-season"
            ;;
        *"demon slayer"*|*"kimetsu"*)
            results="kimetsu-no-yaiba
kimetsu-no-yaiba-mugen-train
kimetsu-no-yaiba-entertainment-district-arc"
            ;;
        *"one piece"*)
            results="one-piece
one-piece-film-red
one-piece-stampede"
            ;;
        *"naruto"*)
            results="naruto
naruto-shippuden
boruto-naruto-next-generations"
            ;;
        *"dragon ball"*)
            results="dragon-ball
dragon-ball-z
dragon-ball-super"
            ;;
        *)
            # Generic search results for any other query
            results="$(echo "$query" | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')
$(echo "$query" | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')-season-2
$(echo "$query" | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')-movie"
            ;;
    esac
    
    echo "$results"
}

# Get episodes for anime
get_episodes() {
    local anime_id="$1"
    echo -e "${CYAN}📺 Fetching episodes...${RESET}"
    
    # For demonstration, return episode counts based on anime
    case "$anime_id" in
        *"code-geass"*|*"code geass"*)
            if [[ "$anime_id" == *"r2"* ]]; then
                echo "25"
            else
                echo "25"
            fi
            ;;
        *"death-note"*|*"death note"*)
            echo "37"
            ;;
        *"attack"*|*"shingeki"*)
            if [[ "$anime_id" == *"season-2"* ]]; then
                echo "12"
            elif [[ "$anime_id" == *"season-3"* ]]; then
                echo "22"
            elif [[ "$anime_id" == *"final"* ]]; then
                echo "16"
            else
                echo "25"
            fi
            ;;
        *"demon"*|*"kimetsu"*)
            if [[ "$anime_id" == *"mugen"* ]]; then
                echo "1"
            elif [[ "$anime_id" == *"entertainment"* ]]; then
                echo "11"
            else
                echo "26"
            fi
            ;;
        *"one-piece"*)
            echo "1000"  # One Piece has many episodes!
            ;;
        *"naruto"*)
            if [[ "$anime_id" == *"shippuden"* ]]; then
                echo "500"
            elif [[ "$anime_id" == *"boruto"* ]]; then
                echo "250"
            else
                echo "220"
            fi
            ;;
        *)
            echo "24"  # Default episode count
            ;;
    esac
}

# Get streaming links - demo implementation
get_stream_link() {
    local anime_id="$1"
    local episode="$2"
    echo -e "${CYAN}🔗 Getting stream link...${RESET}"
    
    # This would connect to actual streaming sources in a real implementation
    # For now, return a demo URL
    echo "https://demo-stream-server.com/$anime_id/episode-$episode.m3u8"
}

# Enhanced anime selection with custom styling
enhanced_anime_search() {
    local query="$1"
    
    print_animated_banner
    
    echo -e "${CYAN}${BOLD}🔍 Searching for: ${YELLOW}\"$query\"${RESET}"
    echo -e "${DIM}Fetching anime information and sources...${RESET}"
    
    # Get anime info for poster
    local response=$(get_anime_info "$query")
    local poster_url=""
    local anime_title=""
    
    if [[ -n "$response" ]] && echo "$response" | jq -e '.data[0]' >/dev/null 2>&1; then
        poster_url=$(echo "$response" | jq -r '.data[0].images.jpg.large_image_url')
        anime_title=$(echo "$response" | jq -r '.data[0].title')
        local score=$(echo "$response" | jq -r '.data[0].score // 0')
        local year=$(echo "$response" | jq -r '.data[0].year // "N/A"')
        local synopsis=$(echo "$response" | jq -r '.data[0].synopsis // "No synopsis available"' | cut -c1-200)
        
        echo ""
        echo -e "${GREEN}${BOLD}✨ Found: ${CYAN}$anime_title${RESET}"
        echo -e "${YELLOW}⭐ Score: ${GREEN}$score${RESET} | ${YELLOW}📅 Year: ${GREEN}$year${RESET}"
        echo -e "${DIM}${synopsis}...${RESET}"
        echo ""
        
        # Show poster
        if [[ "$poster_url" != "null" && -n "$poster_url" ]]; then
            display_enhanced_poster "$anime_title" "$poster_url"
        fi
    fi
    
    # Search for anime episodes
    echo -e "${PURPLE}${BOLD}╭─────────────────────────────────────────────╮${RESET}"
    echo -e "${PURPLE}${BOLD}│${CYAN}          🎌 FINDING ANIME SOURCES 🎌       ${PURPLE}│${RESET}"
    echo -e "${PURPLE}${BOLD}╰─────────────────────────────────────────────╯${RESET}"
    
    local search_results
    search_results=$(search_anime "$query")
    echo -e "${DIM}Found $(echo "$search_results" | wc -l) anime results${RESET}"
    
    if [[ -z "$search_results" ]]; then
        echo -e "${RED}❌ No anime found for: ${YELLOW}$query${RESET}"
        return 1
    fi
    
    # Enhanced anime selection menu
    echo -e "${CYAN}${BOLD}🎮 Select anime version:${RESET}"
    echo -e "${DIM}Use ↑/↓ arrows, Enter to select, Esc to cancel${RESET}"
    
    local selected_anime
    selected_anime=$(echo "$search_results" | 
        sed 's/-/ /g' | 
        sed 's/\b\w/\U&/g' | 
        nl -nln -w3 -s'. ' | 
        fzf $FZF_ULTIMATE \
            --prompt="$ANIME_PROMPT" \
            --header="🎌 ANI-CLI ULTIMATE - Choose Your Anime ✨" \
            --preview='echo -e "\033[1;35m🎌 Anime Details 🎌\033[0m\n\033[1;36mTitle:\033[0m {2..}\n\033[1;33m⭐ Enhanced Experience\033[0m\n\033[2mBeautiful menus • Episode tracking • HD quality\033[0m"' \
            --preview-window=up:30%:wrap)
    
    if [[ -z "$selected_anime" ]]; then
        echo -e "${YELLOW}🚪 Cancelled by user${RESET}"
        return 0
    fi
    
    # Extract anime ID from selection
    local anime_id=$(echo "$selected_anime" | sed 's/^[0-9]*\. //' | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')
    
    # Get episodes
    echo -e "${PURPLE}${BOLD}╭─────────────────────────────────────────────╮${RESET}"
    echo -e "${PURPLE}${BOLD}│${CYAN}          🎌 LOADING EPISODES 🎌            ${PURPLE}│${RESET}"
    echo -e "${PURPLE}${BOLD}╰─────────────────────────────────────────────╯${RESET}"
    
    local total_episodes
    total_episodes=$(get_episodes "$anime_id") &
    show_spinner $! "Loading episode list"
    
    if [[ -z "$total_episodes" || "$total_episodes" == "0" ]]; then
        echo -e "${RED}❌ No episodes found${RESET}"
        return 1
    fi
    
    select_episode "$anime_id" "$total_episodes" "$(echo "$selected_anime" | sed 's/^[0-9]*\. //')"
}

# Enhanced episode selection
select_episode() {
    local anime_id="$1"
    local total_episodes="$2"
    local anime_title="$3"
    local current_episode="${4:-1}"
    
    while true; do
        echo -e "${CYAN}${BOLD}📺 Episode Selection for: ${YELLOW}$anime_title${RESET}"
        echo -e "${DIM}Total Episodes: ${GREEN}$total_episodes${RESET} | Current: ${GREEN}$current_episode${RESET}"
        
        # Create episode list with enhanced formatting
        local episode_list=""
        for ((i=1; i<=total_episodes; i++)); do
            if [[ $i -eq $current_episode ]]; then
                episode_list+="▶️  Episode $i (Currently Selected)\n"
            else
                episode_list+="📺 Episode $i\n"
            fi
        done
        
        # Enhanced episode selection menu
        local selected_ep
        selected_ep=$(echo -e "$episode_list" | 
            fzf $FZF_ULTIMATE \
                --prompt="$EPISODE_PROMPT" \
                --header="🎌 $anime_title - Select Episode ✨" \
                --preview='echo -e "\033[1;35m📺 Episode Preview 📺\033[0m\n\033[1;36mAnime:\033[0m '"$anime_title"'\n\033[1;36mEpisode:\033[0m {}\n\033[1;33m✨ Features:\033[0m\n• HD Quality Streaming\n• Multiple Servers\n• Auto-continue\n• Beautiful Interface"' \
                --preview-window=right:50%:wrap)
        
        if [[ -z "$selected_ep" ]]; then
            echo -e "${YELLOW}🚪 Returning to anime selection${RESET}"
            return 0
        fi
        
        # Extract episode number
        local episode_num=$(echo "$selected_ep" | grep -oP '\d+')
        
        play_episode "$anime_id" "$episode_num" "$anime_title" "$total_episodes"
    done
}

# Enhanced video player with post-episode menu
play_episode() {
    local anime_id="$1"
    local episode_num="$2"
    local anime_title="$3"
    local total_episodes="$4"
    
    echo -e "${PURPLE}${BOLD}╭─────────────────────────────────────────────╮${RESET}"
    echo -e "${PURPLE}${BOLD}│${CYAN}          🎌 PLAYING EPISODE $episode_num 🎌         ${PURPLE}│${RESET}"
    echo -e "${PURPLE}${BOLD}╰─────────────────────────────────────────────╯${RESET}"
    
    # Get stream link
    local stream_link
    stream_link=$(get_stream_link "$anime_id" "$episode_num") &
    show_spinner $! "Preparing stream"
    
    # Add to history
    echo "$(date '+%Y-%m-%d %H:%M:%S') | $anime_title | Episode $episode_num" >> "$HISTORY_FILE"
    
    echo -e "${GREEN}▶️  Playing: ${CYAN}$anime_title ${YELLOW}Episode $episode_num${RESET}"
    echo -e "${DIM}Press Ctrl+C to stop playback${RESET}"
    
    # Enhanced demo player with beautiful interface
    echo -e "${GREEN}${BOLD}🎬 DEMO PLAYER - Enhanced Interface 🎬${RESET}"
    echo -e "${PURPLE}╭─────────────────────────────────────────────╮${RESET}"
    echo -e "${PURPLE}│${CYAN}           ▶️  NOW PLAYING ▶️                ${PURPLE}│${RESET}"
    echo -e "${PURPLE}│${YELLOW}  $anime_title${PURPLE}                        │${RESET}"
    echo -e "${PURPLE}│${GREEN}  Episode $episode_num of $total_episodes${PURPLE}                     │${RESET}"
    echo -e "${PURPLE}│${DIM}  Stream: HD Quality • Auto-continue      ${PURPLE}│${RESET}"
    echo -e "${PURPLE}╰─────────────────────────────────────────────╯${RESET}"
    
    # Simulate video playback progress
    echo -e "${CYAN}${BOLD}📺 Playing video...${RESET}"
    echo -ne "${BLUE}Progress: "
    for i in {1..20}; do
        echo -ne "█"
        sleep 0.1
    done
    echo -e " ${GREEN}100%${RESET}"
    
    echo -e "${GREEN}✅ Episode completed successfully!${RESET}"
    sleep 1
    
    # Enhanced post-episode menu
    post_episode_menu "$anime_id" "$episode_num" "$anime_title" "$total_episodes"
}

# Beautiful post-episode menu
post_episode_menu() {
    local anime_id="$1"
    local episode_num="$2"
    local anime_title="$3"
    local total_episodes="$4"
    
    local options=""
    
    # Build dynamic menu based on episode position
    if [[ $episode_num -lt $total_episodes ]]; then
        options+="▶️  Next Episode ($(($episode_num + 1)))\n"
    fi
    
    options+="🔄 Replay Episode $episode_num\n"
    
    if [[ $episode_num -gt 1 ]]; then
        options+="⏮️  Previous Episode ($(($episode_num - 1)))\n"
    fi
    
    options+="📺 Select Different Episode\n"
    options+="⚙️  Change Quality\n"
    options+="📚 Anime Information\n"
    options+="🏠 Back to Main Menu\n"
    options+="🚪 Exit"
    
    echo -e "${GREEN}✅ Episode $episode_num completed!${RESET}"
    
    local action
    action=$(echo -e "$options" | 
        fzf $FZF_ULTIMATE \
            --prompt="$ACTION_PROMPT" \
            --header="🎌 $anime_title - Episode $episode_num Finished ✨" \
            --preview='echo -e "\033[1;35m🎮 Action Preview 🎮\033[0m\n\033[1;36mCurrent:\033[0m '"$anime_title"' Ep. '"$episode_num"'\n\033[1;36mAction:\033[0m {}\n\033[1;33m✨ Ultimate Features:\033[0m\n• Seamless navigation\n• Episode tracking\n• Quality options\n• Beautiful interface"' \
            --preview-window=right:50%:wrap)
    
    case "$action" in
        "▶️  Next"*)
            play_episode "$anime_id" $(($episode_num + 1)) "$anime_title" "$total_episodes"
            ;;
        "🔄 Replay"*)
            play_episode "$anime_id" "$episode_num" "$anime_title" "$total_episodes"
            ;;
        "⏮️  Previous"*)
            play_episode "$anime_id" $(($episode_num - 1)) "$anime_title" "$total_episodes"
            ;;
        "📺 Select Different"*)
            select_episode "$anime_id" "$total_episodes" "$anime_title" "$episode_num"
            ;;
        "⚙️  Change Quality"*)
            quality_menu "$anime_id" "$episode_num" "$anime_title" "$total_episodes"
            ;;
        "📚 Anime Information"*)
            show_anime_info "$anime_title"
            post_episode_menu "$anime_id" "$episode_num" "$anime_title" "$total_episodes"
            ;;
        "🏠 Back to Main"*)
            return 0
            ;;
        "🚪 Exit"|*)
            echo -e "${CYAN}👋 Thanks for using ANI-CLI ULTIMATE!${RESET}"
            exit 0
            ;;
    esac
}

# Quality selection menu
quality_menu() {
    local anime_id="$1"
    local episode_num="$2"
    local anime_title="$3"
    local total_episodes="$4"
    
    local qualities="🎬 1080p (Best Quality)
📺 720p (High Quality)
💻 480p (Standard Quality)
📱 360p (Mobile Friendly)"
    
    local selected_quality
    selected_quality=$(echo "$qualities" | 
        fzf $FZF_ULTIMATE \
            --prompt="$QUALITY_PROMPT" \
            --header="🎌 Select Video Quality ✨" \
            --preview='echo -e "\033[1;35m⚙️ Quality Info ⚙️\033[0m\n\033[1;36mSelected:\033[0m {}\n\033[1;33mRecommendation:\033[0m\n• 1080p: Best for large screens\n• 720p: Perfect balance\n• 480p: Good for slower connections\n• 360p: Mobile & limited data"' \
            --preview-window=right:50%:wrap)
    
    if [[ -n "$selected_quality" ]]; then
        echo -e "${GREEN}✅ Quality set to: $selected_quality${RESET}"
        sleep 1
        play_episode "$anime_id" "$episode_num" "$anime_title" "$total_episodes"
    else
        post_episode_menu "$anime_id" "$episode_num" "$anime_title" "$total_episodes"
    fi
}

# Show anime information
show_anime_info() {
    local anime_title="$1"
    echo -e "${PURPLE}╭─────────────────────────────────────────────╮${RESET}"
    echo -e "${PURPLE}│${CYAN}${BOLD}           📚 ANIME INFORMATION 📚           ${PURPLE}│${RESET}"
    echo -e "${PURPLE}╰─────────────────────────────────────────────╯${RESET}"
    echo -e "${CYAN}Title: ${YELLOW}$anime_title${RESET}"
    echo -e "${CYAN}Status: ${GREEN}Available for streaming${RESET}"
    echo -e "${CYAN}Source: ${GREEN}ANI-CLI ULTIMATE${RESET}"
    echo -e "${DIM}Press Enter to continue...${RESET}"
    read
}

# Show enhanced help
show_help() {
    print_animated_banner
    
    echo -e "${CYAN}${BOLD}📖 USAGE:${RESET}"
    echo -e "  ${GREEN}ani${RESET} ${YELLOW}\"<search_query>\"${RESET}"
    echo ""
    
    echo -e "${CYAN}${BOLD}🎌 EXAMPLES:${RESET}"
    echo -e "  ${GREEN}ani${RESET} ${YELLOW}\"death note\"${RESET}"
    echo -e "  ${GREEN}ani${RESET} ${YELLOW}\"attack on titan\"${RESET}"
    echo -e "  ${GREEN}ani${RESET} ${YELLOW}\"demon slayer\"${RESET}"
    echo -e "  ${GREEN}ani${RESET} ${YELLOW}\"one piece\"${RESET}"
    echo ""
    
    echo -e "${CYAN}${BOLD}✨ ULTIMATE FEATURES:${RESET}"
    echo -e "  🎨 ${GREEN}Beautiful anime posters & info${RESET}"
    echo -e "  🌈 ${GREEN}Consistent visual styling throughout${RESET}"
    echo -e "  📺 ${GREEN}Enhanced episode selection menus${RESET}"
    echo -e "  🎮 ${GREEN}Interactive post-episode options${RESET}"
    echo -e "  ⚙️  ${GREEN}Quality selection with previews${RESET}"
    echo -e "  📚 ${GREEN}Episode history tracking${RESET}"
    echo -e "  🎭 ${GREEN}Custom anime-themed interface${RESET}"
    echo -e "  ⚡ ${GREEN}Smooth animations & transitions${RESET}"
    echo ""
    
    echo -e "${CYAN}${BOLD}🎮 NAVIGATION:${RESET}"
    echo -e "  ${YELLOW}↑/↓${RESET} - Navigate options"
    echo -e "  ${YELLOW}Enter${RESET} - Select option"
    echo -e "  ${YELLOW}Esc${RESET} - Go back/Cancel"
    echo -e "  ${YELLOW}Tab${RESET} - Move focus"
    echo -e "  ${YELLOW}?${RESET} - Show help in menus"
    echo ""
    
    echo -e "${PURPLE}╭─────────────────────────────────────────────╮${RESET}"
    echo -e "${PURPLE}│${CYAN}${BOLD}            🎌 ANI-CLI ULTIMATE 🎌           ${PURPLE}│${RESET}"
    echo -e "${PURPLE}│${DIM}              Made by Andromeda ✨           ${PURPLE}│${RESET}"
    echo -e "${PURPLE}│${DIM}        Complete Visual Anime Experience     ${PURPLE}│${RESET}"
    echo -e "${PURPLE}╰─────────────────────────────────────────────╯${RESET}"
}

# Main function
main() {
    # Check dependencies
    local missing_deps=()
    
    if ! command -v fzf >/dev/null 2>&1; then
        missing_deps+=("fzf")
    fi
    
    if ! command -v jq >/dev/null 2>&1; then
        missing_deps+=("jq")
    fi
    
    if ! command -v curl >/dev/null 2>&1; then
        missing_deps+=("curl")
    fi
    
    # Optional but recommended
    if ! command -v chafa >/dev/null 2>&1; then
        echo -e "${YELLOW}⚠️  Optional: Install 'chafa' for anime posters${RESET}"
    fi
    
    if ! command -v mpv >/dev/null 2>&1; then
        echo -e "${YELLOW}⚠️  Optional: Install 'mpv' for video playback${RESET}"
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo -e "${RED}${BOLD}❌ Missing required dependencies:${RESET}"
        for dep in "${missing_deps[@]}"; do
            echo -e "  ${YELLOW}$dep${RESET}"
        done
        echo ""
        echo -e "${CYAN}Install with:${RESET}"
        echo -e "  ${GREEN}brew install ${missing_deps[*]}${RESET} ${DIM}(macOS)${RESET}"
        echo -e "  ${GREEN}sudo apt install ${missing_deps[*]}${RESET} ${DIM}(Ubuntu/Debian)${RESET}"
        echo -e "  ${GREEN}sudo pacman -S ${missing_deps[*]}${RESET} ${DIM}(Arch Linux)${RESET}"
        exit 1
    fi
    
    case "${1:-}" in
        "--help"|"-h"|"")
            show_help
            ;;
        "--history")
            if [[ -f "$HISTORY_FILE" ]]; then
                echo -e "${CYAN}${BOLD}📚 Watch History:${RESET}"
                cat "$HISTORY_FILE" | tail -20
            else
                echo -e "${YELLOW}No watch history found${RESET}"
            fi
            ;;
        *)
            enhanced_anime_search "$1"
            ;;
    esac
}

main "$@" 