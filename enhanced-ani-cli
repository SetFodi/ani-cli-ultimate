#!/bin/sh

version_number="4.10.1"

# UI

external_menu() {
    rofi "$1" -sort -dmenu -i -width 1500 -p "$2" "$3"
}

# Enhanced loading animation with progress and spinners
show_loading_animation() {
    local message="$1"
    local duration="${2:-1}"
    
    # Terminal-safe ASCII spinner animation
    local spinners="|/-\\"
    local delay=0.1
    local loops=$((duration * 10))
    
    for i in $(seq 1 $loops); do
        local spinner_char=$(echo "$spinners" | cut -c $((($i % 4) + 1)))
        printf "\r\033[1;36m[\033[1;35m%s\033[1;36m] \033[1;35m%s\033[0m" "$spinner_char" "$message"
        sleep $delay
    done
    
    printf "\r\033[1;32m[✓]\033[0m \033[1;36m%s\033[0m \033[1;32mcomplete!\033[0m\n" "$message"
}

# Animated text with typewriter effect
typewriter_effect() {
    local text="$1"
    local delay="${2:-0.05}"
    
    for i in $(seq 1 ${#text}); do
        printf "%c" "$(echo "$text" | cut -c $i)"
        sleep "$delay"
    done
    printf "\n"
}

# Progress bar animation with ASCII characters
progress_bar() {
    local current="$1"
    local total="$2"
    local width=40
    local percentage=$((current * 100 / total))
    local filled=$((current * width / total))
    
    printf "\r\033[1;34m["
    for i in $(seq 1 $filled); do printf "#"; done
    for i in $(seq $((filled + 1)) $width); do printf "."; done
    printf "] %d%% \033[0m" "$percentage"
    
    [ "$current" -eq "$total" ] && printf "\n"
}

# Smooth menu transition effects
menu_transition() {
    local direction="${1:-down}"
    local lines="${2:-3}"
    
    case "$direction" in
        "down")
            for i in $(seq 1 $lines); do
                printf "\033[1;35m>>>\033[0m"
                sleep 0.1
            done
            ;;
        "up")
            for i in $(seq 1 $lines); do
                printf "\033[1;33m<<<\033[0m"
                sleep 0.1
            done
            ;;
    esac
    printf "\n"
}

# Enhanced ASCII art banner
show_ascii_banner() {
    printf "\033[1;35m\n"
    printf "     █████╗ ███╗   ██╗██╗    ███████╗███╗   ██╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗███████╗██████╗ \n"
    printf "    ██╔══██╗████╗  ██║██║    ██╔════╝████╗  ██║██║  ██║██╔══██╗████╗  ██║██╔════╝██╔════╝██╔══██╗\n"
    printf "    ███████║██╔██╗ ██║██║    █████╗  ██╔██╗ ██║███████║███████║██╔██╗ ██║██║     █████╗  ██║  ██║\n"
    printf "    ██╔══██║██║╚██╗██║██║    ██╔══╝  ██║╚██╗██║██╔══██║██╔══██║██║╚██╗██║██║     ██╔══╝  ██║  ██║\n"
    printf "    ██║  ██║██║ ╚████║██║    ███████╗██║ ╚████║██║  ██║██║  ██║██║ ╚████║╚██████╗███████╗██████╔╝\n"
    printf "    ╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝    ╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝╚══════╝╚═════╝ \n"
    printf "\033[0m\n"
    printf "\033[1;36m                              >> Enhanced by Andromeda <<\033[0m\n"
    printf "\033[1;33m                           Premium Anime Streaming Experience\033[0m\n\n"
}

# Anime poster display function with improved ASCII art
show_anime_poster() {
    local anime_title="$1"
    local anime_id="$2"
    
    # Check if chafa is available for image display
    if command -v chafa >/dev/null 2>&1; then
        local cache_dir="$hist_dir/posters"
        mkdir -p "$cache_dir"
        local poster_file="$cache_dir/${anime_id}.jpg"
        
        # Try to download poster if not cached
        if [ ! -f "$poster_file" ]; then
            # Use a simplified anime poster API (placeholder - you can replace with actual API)
            local poster_url="https://via.placeholder.com/300x400/1a1a2e/ffffff?text=$(printf '%s' "$anime_title" | sed 's/ /+/g')"
            curl -s -o "$poster_file" "$poster_url" 2>/dev/null || return 1
        fi
        
        # Display poster with chafa
        if [ -f "$poster_file" ]; then
            printf "\033[1;35m+---------------------------------------------+\033[0m\n"
            printf "\033[1;35m|             ANIME POSTER                   |\033[0m\n"
            printf "\033[1;35m+---------------------------------------------+\033[0m\n"
            chafa --size=20x15 --format=symbols "$poster_file" 2>/dev/null | sed 's/^/\033[1;35m|\033[0m /' | sed 's/$/\033[1;35m |\033[0m/'
            printf "\033[1;35m+---------------------------------------------+\033[0m\n\n"
            return 0
        fi
    fi
    
    # Enhanced ASCII art poster with better design
    local title_display="$(printf '%.25s' "$anime_title")"
    printf "\033[1;35m+===============================================+\033[0m\n"
    printf "\033[1;35m|               \033[1;36m%s\033[1;35m               |\033[0m\n" "$title_display"
    printf "\033[1;35m+===============================================+\033[0m\n"
    printf "\033[1;35m|\033[0m                                               \033[1;35m|\033[0m\n"
    printf "\033[1;35m|\033[1;36m     ####    ###   ##  ## ####  ###  ###     \033[1;35m|\033[0m\n"
    printf "\033[1;35m|\033[1;33m    ##  ##  ## ##  ### ##  ##  ## ## ##      \033[1;35m|\033[0m\n"
    printf "\033[1;35m|\033[1;32m    ######  ##### #### ##  ##  ###   ###     \033[1;35m|\033[0m\n"
    printf "\033[1;35m|\033[1;31m    ##  ## ##   ## ## ###  ##  ## ##   ##     \033[1;35m|\033[0m\n"
    printf "\033[1;35m|\033[1;34m    ##  ## ##   ## ##  ## #### ##  ## ###     \033[1;35m|\033[0m\n"
    printf "\033[1;35m|\033[0m                                               \033[1;35m|\033[0m\n"
    printf "\033[1;35m|\033[1;32m              >> ENJOY WATCHING <<             \033[1;35m|\033[0m\n"
    printf "\033[1;35m|\033[1;34m               ** ENHANCED **                  \033[1;35m|\033[0m\n"
    printf "\033[1;35m|\033[0m                                               \033[1;35m|\033[0m\n"
    printf "\033[1;35m+===============================================+\033[0m\n\n"
}

# Enhanced credits display
show_credits() {
    printf "\n\033[2;36m================================================================\033[0m\n"
    printf "\033[1;35m>> Created by \033[1;33mAndromeda\033[1;35m ** Enhanced with love for anime community\033[0m\n"
    printf "\033[2;37m   Built upon the amazing \033[1;36mani-cli\033[2;37m by \033[1;32mpystardust\033[2;37m and contributors\033[0m\n"
    printf "\033[2;37m   Original project: \033[4;34mhttps://github.com/pystardust/ani-cli\033[0m\n"
    printf "\033[2;36m================================================================\033[0m\n"
}



# Enhanced launcher with advanced effects and IINA player detection
launcher() {
    [ "$use_external_menu" = "0" ] && [ -z "$1" ] && set -- "+m" "$2"
    
    if [ "$use_external_menu" = "0" ]; then
        # Dynamic header based on player availability
        local header_text=">> ANI ULTIMATE - Enhanced by Andromeda <<"
        if command -v iina >/dev/null 2>&1 || [ -e "/Applications/IINA.app/Contents/MacOS/iina-cli" ]; then
            header_text=">> ANI ULTIMATE (IINA Ready) - Enhanced by Andromeda <<"
        fi
        
        # Ultra-smooth fzf with glassmorphism-inspired colors and animations
        fzf "$1" --reverse --cycle --prompt "$2" \
            --height=90% --border=double --margin=1,3 --padding=2,3 \
            --color=fg:#ffffff,bg:#0a0a0a,hl:#ff6b9d,fg+:#ffffff,bg+:#1a1a2e,hl+:#ff9f43 \
            --color=info:#00d9ff,prompt:#ff6b9d,pointer:#ff9f43,marker:#00d9ff \
            --color=spinner:#ff6b9d,header:#00d9ff,border:#333366,gutter:#0a0a0a,scrollbar:#333366 \
            --header="$header_text" \
            --header-first \
            --preview-window="right:50%:wrap:rounded" \
            --bind="enter:accept" \
            --bind="esc:abort" \
            --bind="tab:toggle+down" \
            --bind="shift-tab:toggle+up" \
            --bind="ctrl-a:select-all" \
            --bind="ctrl-d:deselect-all" \
            --bind="ctrl-t:toggle-all" \
            --bind="ctrl-r:toggle-all+toggle-sort" \
            --bind="ctrl-s:toggle-sort" \
            --bind="?:toggle-preview" \
            --bind="alt-up:preview-up" \
            --bind="alt-down:preview-down" \
            --ansi --tabstop=4 \
            --info=inline \
            --pointer=">" \
            --marker="*" \
            --ellipsis="..." \
            --scroll-off=3 \
            --jump-labels="abcdefghijklmnopqrstuvwxyz" \
            --layout=reverse \
            --multi \
            --algo=v2
    else
        external_menu "$1" "$2" "$external_menu_args"
    fi
}

nth() {
    stdin=$(cat -)
    [ -z "$stdin" ] && return 1
    line_count="$(printf "%s\n" "$stdin" | wc -l | tr -d "[:space:]")"
    [ "$line_count" -eq 1 ] && printf "%s" "$stdin" | cut -f2,3 && return 0
    prompt="$1"
    multi_flag=""
    [ $# -ne 1 ] && shift && multi_flag="$1"
    line=$(printf "%s" "$stdin" | cut -f1,3 | tr '\t' ' ' | launcher "$multi_flag" "$prompt" | cut -d " " -f 1)
    line_start=$(printf "%s" "$line" | head -n1)
    line_end=$(printf "%s" "$line" | tail -n1)
    [ -n "$line" ] || exit 1
    if [ "$line_start" = "$line_end" ]; then
        printf "%s" "$stdin" | grep -E '^'"${line}"'($|[[:space:]])' | cut -f2,3 || exit 1
    else
        printf "%s" "$stdin" | sed -n '/^'"${line_start}"'$/,/^'"${line_end}$"'/p' || exit 1
    fi
}

die() {
    printf "\33[2K\r\033[1;31m%s\033[0m\n" "$*" >&2
    exit 1
}

help_info() {
    printf "
    Usage:
    %s [options] [query]
    %s [query] [options]
    %s [options] [query] [options]

    Options:
      -c, --continue
        Continue watching from history
      -d, --download
        Download the video instead of playing it
      -D, --delete
        Delete history
      -l, --logview
        Show logs
      -s, --syncplay
        Use Syncplay to watch with friends
      -S, --select-nth
        Select nth entry
      -q, --quality
        Specify the video quality
      -v, --vlc
        Use VLC to play the video
      -V, --version
        Show the version of the script
      -h, --help
        Show this help message and exit
      -e, --episode, -r, --range
        Specify the number of episodes to watch
      --dub
        Play dubbed version
      --rofi
        Use rofi instead of fzf for the interactive menu
      --skip
        Use ani-skip to skip the intro of the episode (mpv only)
      --no-detach
        Don't detach the player (useful for in-terminal playback, mpv only)
      --exit-after-play
        Exit the player, and return the player exit code (useful for non interactive scenarios, mpv only)
      --skip-title <title>
        Use given title as ani-skip query
      -N, --nextep-countdown
        Display a countdown to the next episode
      -U, --update
        Update the script
    
    ** NEW UNIQUE FEATURES:
      -W, --watchlist
        Show your personal watchlist
      -F, --favorites  
        Show your favorite anime
      -L, --later
        Show your watch later queue
      --dashboard
        Show stats dashboard with viewing analytics
      --add-watchlist <anime>
        Quick add anime to watchlist
      --add-favorite <anime>
        Quick add anime to favorites
    Some example usages:
      %s -q 720p banana fish
      %s --skip --skip-title \"one piece\" -S 2 one piece
      %s -d -e 2 cyberpunk edgerunners
      %s --vlc cyberpunk edgerunners -q 1080p -e 4
      %s blue lock -e 5-6
      %s -e \"5 6\" blue lock
    \n" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}"
    exit 0
}

version_info() {
    printf "%s\n" "$version_number"
    exit 0
}

update_script() {
    update="$(curl -s -A "$agent" "https://raw.githubusercontent.com/pystardust/ani-cli/master/ani-cli")" || die "Connection error"
    update="$(printf '%s\n' "$update" | diff -u "$0" -)"
    if [ -z "$update" ]; then
        printf "Script is up to date :)\n"
    else
        if printf '%s\n' "$update" | patch "$0" -; then
            printf "Script has been updated\n"
        else
            die "Can't update for some reason!"
        fi
    fi
    exit 0
}

# checks if dependencies are present
dep_ch() {
    for dep; do
        command -v "${dep%% *}" >/dev/null || die "Program \"${dep%% *}\" not found. Please install it."
    done
}

where_iina() {
    if [ -e "/Applications/IINA.app/Contents/MacOS/iina-cli" ]; then
        echo "/Applications/IINA.app/Contents/MacOS/iina-cli" && return 0
    elif command -v "iina" >/dev/null 2>&1; then
        echo "iina" && return 0
    fi
    printf "%s" "iina" && return 0
}

where_mpv() {
    command -v "flatpak" >/dev/null && flatpak info io.mpv.Mpv >/dev/null 2>&1 && printf "%s" "flatpak_mpv" && return 0
    printf "%s" "mpv" && return 0
}

# Enhanced player detection with IINA priority on macOS
detect_best_player() {
    # Check if running on macOS
    if [ "$(uname)" = "Darwin" ]; then
        # Prioritize IINA on macOS for best experience
        if command -v iina >/dev/null 2>&1 || [ -e "/Applications/IINA.app/Contents/MacOS/iina-cli" ]; then
            printf "[VIDEO] Using IINA (Best for macOS)\n" >&2
            where_iina && return 0
        fi
    fi
    
    # Fallback to mpv
    if command -v mpv >/dev/null 2>&1; then
        printf "[VIDEO] Using MPV\n" >&2
        where_mpv && return 0
    fi
    
    # VLC as last resort
    if command -v vlc >/dev/null 2>&1; then
        printf "🎞️ Using VLC\n" >&2
        echo "vlc" && return 0
    fi
    
    printf "[WARNING] No suitable video player found\n" >&2
    return 1
}

# Player installation guidance for macOS
suggest_player_installation() {
    if [ "$(uname)" = "Darwin" ]; then
        printf "\n\033[1;33m[WARNING] For the ultimate anime experience, upgrade to IINA!\033[0m\n"
        printf "\033[2;37m   IINA is optimized for macOS with:\033[0m\n"
        printf "\033[2;37m   • [FAST] Hardware-accelerated 4K/8K playback\033[0m\n"
        printf "\033[2;37m   • [UI] Native macOS design & Touch Bar support\033[0m\n"
        printf "\033[2;37m   • [SUB] Advanced subtitle rendering\033[0m\n"
        printf "\033[2;37m   • [POWER] 50% lower power consumption than MPV\033[0m\n"
        printf "\033[2;37m   • [PIP] Picture-in-Picture mode\033[0m\n\n"
        printf "\033[1;36m[INSTALL] Quick Install:\033[0m\n"
        printf "\033[1;32m   brew install --cask iina\033[0m\n"
        printf "\033[2;37m   Or download: https://iina.io/\033[0m\n\n"
        printf "\033[2;36m   Then restart ANI Enhanced for automatic detection! **\033[0m\n"
    fi
}

# SCRAPING

# extract the video links from response of embed urls, extract mp4 links form m3u8 lists
get_links() {
    response="$(curl -e "$allanime_refr" -s "https://${allanime_base}$*" -A "$agent")"
    episode_link="$(printf '%s' "$response" | sed 's|},{|\
|g' | sed -nE 's|.*link":"([^"]*)".*"resolutionStr":"([^"]*)".*|\2 >\1|p;s|.*hls","url":"([^"]*)".*"hardsub_lang":"en-US".*|\1|p')"

    case "$episode_link" in
        *repackager.wixmp.com*)
            extract_link=$(printf "%s" "$episode_link" | cut -d'>' -f2 | sed 's|repackager.wixmp.com/||g;s|\.urlset.*||g')
            for j in $(printf "%s" "$episode_link" | sed -nE 's|.*/,([^/]*),/mp4.*|\1|p' | sed 's|,|\
|g'); do
                printf "%s >%s\n" "$j" "$extract_link" | sed "s|,[^/]*|${j}|g"
            done | sort -nr
            ;;
        *master.m3u8*)
            m3u8_refr=$(printf '%s' "$response" | sed -nE 's|.*Referer":"([^"]*)".*|\1|p') && printf '%s\n' "m3u8_refr >$m3u8_refr" >"$cache_dir/m3u8_refr"
            extract_link=$(printf "%s" "$episode_link" | head -1 | cut -d'>' -f2)
            relative_link=$(printf "%s" "$extract_link" | sed 's|[^/]*$||')
            m3u8_streams="$(curl -e "$m3u8_refr" -s "$extract_link" -A "$agent")"
            printf "%s" "$m3u8_streams" | grep -q "EXTM3U" && printf "%s" "$m3u8_streams" | sed 's|^#EXT-X-STREAM.*x||g; s|,.*|p|g; /^#/d; $!N; s|\n| >|;/EXT-X-I-FRAME/d' |
                sed "s|>|cc>${relative_link}|g" | sort -nr
            printf '%s' "$response" | sed -nE 's|.*"subtitles":\[\{"lang":"en","label":"English","default":"default","src":"([^"]*)".*|subtitle >\1|p' >"$cache_dir/suburl"
            ;;
        *) [ -n "$episode_link" ] && printf "%s\n" "$episode_link" ;;
    esac

    printf "%s" "$*" | grep -q "tools.fast4speed.rsvp" && printf "%s\n" "Yt >$*"
    printf "\033[1;32m%s\033[0m Links Fetched\n" "$provider_name" 1>&2
}

# initialises provider_name and provider_id. First argument is the provider name, 2nd is the regex that matches that provider's link
provider_init() {
    provider_name=$1
    provider_id=$(printf "%s" "$resp" | sed -n "$2" | head -1 | cut -d':' -f2 | sed 's/../&\
/g' | sed 's/^79$/A/g;s/^7a$/B/g;s/^7b$/C/g;s/^7c$/D/g;s/^7d$/E/g;s/^7e$/F/g;s/^7f$/G/g;s/^70$/H/g;s/^71$/I/g;s/^72$/J/g;s/^73$/K/g;s/^74$/L/g;s/^75$/M/g;s/^76$/N/g;s/^77$/O/g;s/^68$/P/g;s/^69$/Q/g;s/^6a$/R/g;s/^6b$/S/g;s/^6c$/T/g;s/^6d$/U/g;s/^6e$/V/g;s/^6f$/W/g;s/^60$/X/g;s/^61$/Y/g;s/^62$/Z/g;s/^59$/a/g;s/^5a$/b/g;s/^5b$/c/g;s/^5c$/d/g;s/^5d$/e/g;s/^5e$/f/g;s/^5f$/g/g;s/^50$/h/g;s/^51$/i/g;s/^52$/j/g;s/^53$/k/g;s/^54$/l/g;s/^55$/m/g;s/^56$/n/g;s/^57$/o/g;s/^48$/p/g;s/^49$/q/g;s/^4a$/r/g;s/^4b$/s/g;s/^4c$/t/g;s/^4d$/u/g;s/^4e$/v/g;s/^4f$/w/g;s/^40$/x/g;s/^41$/y/g;s/^42$/z/g;s/^08$/0/g;s/^09$/1/g;s/^0a$/2/g;s/^0b$/3/g;s/^0c$/4/g;s/^0d$/5/g;s/^0e$/6/g;s/^0f$/7/g;s/^00$/8/g;s/^01$/9/g;s/^15$/-/g;s/^16$/./g;s/^67$/_/g;s/^46$/~/g;s/^02$/:/g;s/^17$/\//g;s/^07$/?/g;s/^1b$/#/g;s/^63$/\[/g;s/^65$/\]/g;s/^78$/@/g;s/^19$/!/g;s/^1c$/$/g;s/^1e$/&/g;s/^10$/\(/g;s/^11$/\)/g;s/^12$/*/g;s/^13$/+/g;s/^14$/,/g;s/^03$/;/g;s/^05$/=/g;s/^1d$/%/g' | tr -d '\n' | sed "s/\/clock/\/clock\.json/")
}

# generates links based on given provider
generate_link() {
    case $1 in
        1) provider_init "wixmp" "/Default :/p" ;;    # wixmp(default)(m3u8)(multi) -> (mp4)(multi)
        2) provider_init "youtube" "/Yt-mp4 :/p" ;;   # youtube(mp4)(single)
        3) provider_init "sharepoint" "/S-mp4 :/p" ;; # sharepoint(mp4)(single)
        *) provider_init "hianime" "/Luf-Mp4 :/p" ;;  # hianime(m3u8)(multi)
    esac
    [ -n "$provider_id" ] && get_links "$provider_id"
}

select_quality() {
    # removing urls which have soft subs to avoid playing on android, iSH and vlc (m3u8 streams don't get correct referrer)
    printf '%s' "$player_function" | cut -f1 -d" " | grep -qE '(android|iSH|vlc)' && links=$(printf '%s' "$links" | sed '/cc>/d;/subtitle >/d;/m3u8_refr >/d')
    printf '%s' "$player_function" | cut -f1 -d" " | grep -qE '(android|iSH)' && links=$(printf '%s' "$links" | sed '/Yt >/d')
    case "$1" in
        best) result=$(printf "%s" "$links" | head -n1) ;;
        worst) result=$(printf "%s" "$links" | grep -E '^[0-9]{3,4}' | tail -n1) ;;
        *) result=$(printf "%s" "$links" | grep -m 1 "$1") ;;
    esac
    [ -z "$result" ] && printf "Specified quality not found, defaulting to best\n" 1>&2 && result=$(printf "%s" "$links" | head -n1)

    # add refr,sub flags for m3u8 and refr flag for yt
    printf '%s' "$result" | grep -q "cc>" && subtitle="$(printf '%s' "$links" | sed -nE 's|subtitle >(.*)|\1|p')"
    printf '%s' "$result" | grep -q "cc>" && m3u8_refr="$(printf '%s' "$links" | sed -nE 's|m3u8_refr >(.*)|\1|p')" && refr_flag="--referrer=$m3u8_refr"
    printf "%s" "$result" | grep -q "tools.fast4speed.rsvp" && refr_flag="--referrer=$allanime_refr"

    ! (printf '%s' "$result" | grep -qE "(cc>|tools.fast4speed.rsvp)") && unset refr_flag
    ! (printf '%s' "$result" | grep -q "cc>") && unset subs_flag
    episode=$(printf "%s" "$result" | cut -d'>' -f2)
}

# gets embed urls, collects direct links into provider files, selects one with desired quality into $episode
get_episode_url() {
    # get the embed urls of the selected episode
    #shellcheck disable=SC2016
    episode_embed_gql='query ($showId: String!, $translationType: VaildTranslationTypeEnumType!, $episodeString: String!) { episode( showId: $showId translationType: $translationType episodeString: $episodeString ) { episodeString sourceUrls }}'

    resp=$(curl -e "$allanime_refr" -s -G "${allanime_api}/api" --data-urlencode "variables={\"showId\":\"$id\",\"translationType\":\"$mode\",\"episodeString\":\"$ep_no\"}" --data-urlencode "query=$episode_embed_gql" -A "$agent" | tr '{}' '\n' | sed 's|\\u002F|\/|g;s|\\||g' | sed -nE 's|.*sourceUrl":"--([^"]*)".*sourceName":"([^"]*)".*|\2 :\1|p')
    # generate links into sequential files
    cache_dir="$(mktemp -d)"
    providers="1 2 3 4"
    for provider in $providers; do
        generate_link "$provider" >"$cache_dir"/"$provider" &
    done
    wait
    # select the link with matching quality
    links=$(cat "$cache_dir"/* | sort -g -r -s)
    rm -r "$cache_dir"
    select_quality "$quality"
    if printf "%s" "$ep_list" | grep -q "^$ep_no$"; then
        [ -z "$episode" ] && die "Episode is released, but no valid sources!"
    else
        [ -z "$episode" ] && die "Episode not released!"
    fi
}

# search the query and give results
search_anime() {
    #shellcheck disable=SC2016
    search_gql='query( $search: SearchInput $limit: Int $page: Int $translationType: VaildTranslationTypeEnumType $countryOrigin: VaildCountryOriginEnumType ) { shows( search: $search limit: $limit page: $page translationType: $translationType countryOrigin: $countryOrigin ) { edges { _id name availableEpisodes __typename } }}'

    curl -e "$allanime_refr" -s -G "${allanime_api}/api" --data-urlencode "variables={\"search\":{\"allowAdult\":false,\"allowUnknown\":false,\"query\":\"$1\"},\"limit\":40,\"page\":1,\"translationType\":\"$mode\",\"countryOrigin\":\"ALL\"}" --data-urlencode "query=$search_gql" -A "$agent" | sed 's|Show|\
| g' | sed -nE "s|.*_id\":\"([^\"]*)\",\"name\":\"(.+)\",.*${mode}\":([1-9][^,]*).*|\1	\2 (\3 episodes)|p" | sed 's/\\"//g'
}

time_until_next_ep() {
    animeschedule="https://animeschedule.net"
    query="$(printf "%s\n" "$*" | tr ' ' '+')"
    curl -s -G "$animeschedule/api/v3/anime" --data "q=${query}" | sed 's|"id"|\n|g' | sed -nE 's|.*,"route":"([^"]*)","premier.*|\1|p' | while read -r anime; do
        data=$(curl -s "$animeschedule/anime/$anime" | sed '1,/"anime-header-list-buttons-wrapper"/d' | sed -nE 's|.*countdown-time-raw" datetime="([^"]*)">.*|Next Raw Release: \1|p;s|.*countdown-time" datetime="([^"]*)">.*|Next Sub Release: \1|p;s|.*english-title">([^<]*)<.*|English Title: \1|p;s|.*main-title".*>([^<]*)<.*|Japanese Title: \1|p')
        status="Ongoing"
        color="33"
        printf "%s\n" "$data"
        ! (printf "%s\n" "$data" | grep -q "Next Raw Release:") && status="Finished" && color="32"
        printf "Status:  \033[1;%sm%s\033[0m\n---\n" "$color" "$status"
    done
    exit 0
}

# get the episodes list of the selected anime
episodes_list() {
    #shellcheck disable=SC2016
    episodes_list_gql='query ($showId: String!) { show( _id: $showId ) { _id availableEpisodesDetail }}'

    curl -e "$allanime_refr" -s -G "${allanime_api}/api" --data-urlencode "variables={\"showId\":\"$*\"}" --data-urlencode "query=$episodes_list_gql" -A "$agent" | sed -nE "s|.*$mode\":\[([0-9.\",]*)\].*|\1|p" | sed 's|,|\
|g; s|"||g' | sort -n -k 1
}

# PLAYING

process_hist_entry() {
    ep_list=$(episodes_list "$id")
    latest_ep=$(printf "%s\n" "$ep_list" | tail -n1)
    title=$(printf "%s\n" "$title" | sed "s|[0-9]\+ episodes|${latest_ep} episodes|")
    ep_no=$(printf "%s" "$ep_list" | sed -n "/^${ep_no}$/{n;p;}") 2>/dev/null
    [ -n "$ep_no" ] && printf "%s\t%s - episode %s\n" "$id" "$title" "$ep_no"
}

update_history() {
    if grep -q -- "$id" "$histfile"; then
        sed -E "s|^[^	]+	${id}	[^	]+$|${ep_no}	${id}	${title}|" "$histfile" >"${histfile}.new"
    else
        cp "$histfile" "${histfile}.new"
        printf "%s\t%s\t%s\n" "$ep_no" "$id" "$title" >>"${histfile}.new"
    fi
    mv "${histfile}.new" "$histfile"
}

download() {
    # download subtitle if it's set
    [ -n "$subtitle" ] && curl -s "$subtitle" -o "$download_dir/$2.vtt"
    case $1 in
        *m3u8*)
            if command -v "yt-dlp" >/dev/null; then
                yt-dlp --referer "$m3u8_refr" "$1" --no-skip-unavailable-fragments --fragment-retries infinite -N 16 -o "$download_dir/$2.mp4"
            else
                ffmpeg -referer "$m3u8_refr" -loglevel error -stats -i "$1" -c copy "$download_dir/$2.mp4"
            fi
            # embed subs into downloads
            # [ -e "$download_dir/$2.vtt" ] && ffmpeg -i "$download_dir/$2.mp4" -i "$download_dir/$2.vtt" -c copy -c:s mov_text "$download_dir/$2.bak.mp4" && mv "$download_dir/$2.bak.mp4" "$download_dir/$2.mp4"
            ;;
        *)
            # shellcheck disable=SC2086
            aria2c --referer="$allanime_refr" --enable-rpc=false --check-certificate=false --continue $iSH_DownFix --summary-interval=0 -x 16 -s 16 "$1" --dir="$download_dir" -o "$2.mp4" --download-result=hide
            ;;
    esac
}

play_episode() {
    [ "$log_episode" = 1 ] && [ "$player_function" != "debug" ] && [ "$player_function" != "download" ] && command -v logger >/dev/null && logger -t ani-cli "${allanime_title}${ep_no}"
    [ "$skip_intro" = 1 ] && skip_flag="$(ani-skip -q "$mal_id" -e "$ep_no")"
    [ -z "$episode" ] && get_episode_url
    # shellcheck disable=SC2086
    case "$player_function" in
        debug)
            printf "All links:\n%s\nSelected link:\n" "$links"
            printf "%s\n" "$episode"
            ;;
        mpv*)
            if [ "$no_detach" = 0 ]; then
                nohup $player_function $skip_flag --force-media-title="${allanime_title}Episode ${ep_no}" "$episode" $subs_flag $refr_flag >/dev/null 2>&1 &
            else
                $player_function $skip_flag $subs_flag $refr_flag --force-media-title="${allanime_title}Episode ${ep_no}" "$episode"
                mpv_exitcode=$?
                [ "$exit_after_play" = 1 ] && [ -z "$range" ] && exit "$mpv_exitcode"
            fi
            ;;
        android_mpv) nohup am start --user 0 -a android.intent.action.VIEW -d "$episode" -n is.xyz.mpv/.MPVActivity >/dev/null 2>&1 & ;;
        android_vlc) nohup am start --user 0 -a android.intent.action.VIEW -d "$episode" -n org.videolan.vlc/org.videolan.vlc.gui.video.VideoPlayerActivity -e "title" "${allanime_title}Episode ${ep_no}" >/dev/null 2>&1 & ;;
        *iina*)
            [ -n "$subs_flag" ] && subs_flag="--mpv-${subs_flag#--}"
            [ -n "$refr_flag" ] && refr_flag="--mpv-${refr_flag#--}"
            if [ "$no_detach" = 0 ]; then
                # Wait for IINA to finish so post-episode menu can appear
                $player_function --no-stdin --mpv-force-media-title="${allanime_title}Episode ${ep_no}" $subs_flag $refr_flag "$episode"
            else
                nohup $player_function --no-stdin --keep-running --mpv-force-media-title="${allanime_title}Episode ${ep_no}" $subs_flag $refr_flag "$episode" >/dev/null 2>&1 &
            fi
            ;;
        flatpak_mpv) flatpak run io.mpv.Mpv --force-media-title="${allanime_title}Episode ${ep_no}" "$episode" $subs_flag $refr_flag >/dev/null 2>&1 & ;;
        vlc*) nohup $player_function --http-referrer="${allanime_refr}" --play-and-exit --meta-title="${allanime_title}Episode ${ep_no}" "$episode" >/dev/null 2>&1 & ;;
        *yncpla*) nohup $player_function "$episode" -- --force-media-title="${allanime_title}Episode ${ep_no}" $subs_flag $refr_flag >/dev/null 2>&1 & ;;
        download) "$player_function" "$episode" "${allanime_title}Episode ${ep_no}" "$subtitle" ;;
        catt) nohup catt cast "$episode" -s "$subtitle" >/dev/null 2>&1 & ;;
        iSH)
            printf "\e]8;;vlc://%s\a~~~~~~~~~~~~~~~~~~~~\n~ Tap to open VLC ~\n~~~~~~~~~~~~~~~~~~~~\e]8;;\a\n" "$episode"
            sleep 5
            ;;
        *) nohup $player_function "$episode" >/dev/null 2>&1 & ;;
    esac
    replay="$episode"
    unset episode
    update_history
    [ "$use_external_menu" = "1" ] && wait
}

play() {
    start=$(printf "%s" "$ep_no" | grep -Eo '^(-1|[0-9]+(\.[0-9]+)?)')
    end=$(printf "%s" "$ep_no" | grep -Eo '(-1|[0-9]+(\.[0-9]+)?)$')
    [ "$start" = "-1" ] && ep_no=$(printf "%s" "$ep_list" | tail -n1) && unset start
    [ -z "$end" ] || [ "$end" = "$start" ] && unset start end
    [ "$end" = "-1" ] && end=$(printf "%s" "$ep_list" | tail -n1)
    line_count=$(printf "%s\n" "$ep_no" | wc -l | tr -d "[:space:]")
    if [ "$line_count" != 1 ] || [ -n "$start" ]; then
        [ -z "$start" ] && start=$(printf "%s\n" "$ep_no" | head -n1)
        [ -z "$end" ] && end=$(printf "%s" "$ep_no" | tail -n1)
        range=$(printf "%s\n" "$ep_list" | sed -nE "/^${start}\$/,/^${end}\$/p")
        [ -z "$range" ] && die "Invalid range!"
        for i in $range; do
            tput clear
            ep_no=$i
            # Enhanced episode loading banner
            printf "\033[1;35m╭─────────────────────────────────────────────╮\033[0m\n"
            printf "\033[1;35m│\033[1;36m            >> NOW LOADING EPISODE <<       \033[1;35m│\033[0m\n"
            printf "\033[1;35m│\033[0m                                           \033[1;35m│\033[0m\n"
            printf "\033[1;35m│\033[1;33m            Episode %s of %s                \033[1;35m│\033[0m\n" "$ep_no" "$title"
            printf "\033[1;35m│\033[1;32m              HD Quality Stream             \033[1;35m│\033[0m\n"
            printf "\033[1;35m│\033[0m                                           \033[1;35m│\033[0m\n"
            printf "\033[1;35m╰─────────────────────────────────────────────╯\033[0m\n"
            show_loading_animation "[PLAYER] Preparing video player" 2
            [ "$i" = "$end" ] && unset range
            play_episode
        done
    else
        play_episode
    fi
    # moves up to stored position and deletes to end
    [ "$player_function" != "debug" ] && [ "$player_function" != "download" ] && tput rc && tput ed
}

# MAIN

# setup
agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0"
allanime_refr="https://allmanga.to"
allanime_base="allanime.day"
allanime_api="https://api.${allanime_base}"
mode="${ANI_CLI_MODE:-sub}"
download_dir="${ANI_CLI_DOWNLOAD_DIR:-.}"
log_episode="${ANI_CLI_LOG:-1}"
quality="${ANI_CLI_QUALITY:-best}"
case "$(uname -a | cut -d " " -f 1,3-)" in
    *Darwin*) 
        if [ -z "$ANI_CLI_PLAYER" ]; then
            player_function="$(detect_best_player 2>/dev/null || where_iina)"
        else
            player_function="$ANI_CLI_PLAYER"
        fi
        ;;   # macOS with enhanced detection
    *ndroid*) player_function="${ANI_CLI_PLAYER:-android_mpv}" ;;     # Android OS (termux)
    *MINGW* | *WSL2*) player_function="${ANI_CLI_PLAYER:-mpv.exe}" ;; # Windows OS
    *ish*) player_function="${ANI_CLI_PLAYER:-iSH}" ;;                # iOS (iSH)
    *) player_function="${ANI_CLI_PLAYER:-$(where_mpv)}" ;;           # Linux OS
esac

no_detach="${ANI_CLI_NO_DETACH:-0}"
exit_after_play="${ANI_CLI_EXIT_AFTER_PLAY:-0}"
use_external_menu="${ANI_CLI_EXTERNAL_MENU:-0}"
external_menu_normal_window="${ANI_CLI_EXTERNAL_MENU_NORMAL_WINDOW:-0}"
skip_intro="${ANI_CLI_SKIP_INTRO:-0}"
# shellcheck disable=SC2154
skip_title="$ANI_CLI_SKIP_TITLE"
[ -t 0 ] || use_external_menu=1
hist_dir="${ANI_CLI_HIST_DIR:-${XDG_STATE_HOME:-$HOME/.local/state}/ani-cli}"
[ ! -d "$hist_dir" ] && mkdir -p "$hist_dir"
histfile="$hist_dir/ani-hsts"
[ ! -f "$histfile" ] && : >"$histfile"
search="${ANI_CLI_DEFAULT_SOURCE:-scrape}"

while [ $# -gt 0 ]; do
    case "$1" in
        -v | --vlc)
            case "$(uname -a | cut -d " " -f 1,3-)" in
                *ndroid*) player_function="android_vlc" ;;
                MINGW* | *WSL2*) player_function="vlc.exe" ;;
                *ish*) player_function="iSH" ;;
                *) player_function="vlc" ;;
            esac
            ;;
        -s | --syncplay)
            case "$(uname -s)" in
                Darwin*) player_function="/Applications/Syncplay.app/Contents/MacOS/syncplay" ;;
                MINGW* | *Msys)
                    export PATH="$PATH":"/c/Program Files (x86)/Syncplay/"
                    player_function="syncplay.exe"
                    ;;
                *) player_function="syncplay" ;;
            esac
            ;;
        -q | --quality)
            [ $# -lt 2 ] && die "missing argument!"
            quality="$2"
            shift
            ;;
        -S | --select-nth)
            [ $# -lt 2 ] && die "missing argument!"
            index="$2"
            shift
            ;;
        -c | --continue) search=history ;;
        -d | --download)
            [ "$player_function" = "iSH" ] && iSH_DownFix="--async-dns=false"
            player_function=download
            ;;
        -D | --delete)
            : >"$histfile"
            exit 0
            ;;
        -l | --logview)
            case "$(uname -s)" in
                Darwin*) log show --predicate 'process == "logger"' ;;
                Linux*) journalctl -t ani-cli ;;
                *) die "Logger not implemented for your platform" ;;
            esac
            exit 0
            ;;
        -V | --version) version_info ;;
        -h | --help) help_info ;;
        -W | --watchlist) show_watchlist; exit 0 ;;
        -F | --favorites) show_favorites; exit 0 ;;
        -L | --later) show_watch_later; exit 0 ;;
        --dashboard) show_stats_dashboard; exit 0 ;;
        --add-watchlist)
            [ $# -lt 2 ] && die "missing argument!"
            search_results=$(search_anime "$2")
            anime_id=$(printf "%s" "$search_results" | head -1 | cut -f1)
            anime_name=$(printf "%s" "$search_results" | head -1 | cut -f2)
            add_to_watchlist "$anime_id" "$anime_name"
            exit 0
            ;;
        --add-favorite)
            [ $# -lt 2 ] && die "missing argument!"
            search_results=$(search_anime "$2")
            anime_id=$(printf "%s" "$search_results" | head -1 | cut -f1)
            anime_name=$(printf "%s" "$search_results" | head -1 | cut -f2)
            add_to_favorites "$anime_id" "$anime_name"
            exit 0
            ;;
        -e | --episode | -r | --range)
            [ $# -lt 2 ] && die "missing argument!"
            ep_no="$2"
            shift
            ;;
        --dub) mode="dub" ;;
        --no-detach) no_detach=1 ;;
        --exit-after-play) exit_after_play=1 && no_detach=1 ;;
        --rofi) use_external_menu=1 ;;
        --skip) skip_intro=1 ;;
        --skip-title)
            [ $# -lt 2 ] && die "missing argument!"
            skip_title="$2"
            shift
            ;;
        -N | --nextep-countdown) search=nextep ;;
        -U | --update) update_script ;;
        *) query="$(printf "%s" "$query $1" | sed "s|^ ||;s| |+|g")" ;;
    esac
    shift
done
[ "$use_external_menu" = "0" ] && multi_selection_flag="${ANI_CLI_MULTI_SELECTION:-"-m"}"
[ "$use_external_menu" = "1" ] && multi_selection_flag="${ANI_CLI_MULTI_SELECTION:-"-multi-select"}"
[ "$external_menu_normal_window" = "1" ] && external_menu_args="-normal-window"
# Fancy startup banner
show_startup_banner() {
    clear
    printf "\n"
    typewriter_effect ">> ANI Enhanced - Ultimate Anime Experience <<" 0.04
    printf "\n"
    printf "\033[1;35m╭─══════════════════════════════════════════════════════════─╮\033[0m\n"
    printf "\033[1;35m│ \033[1;36m                     >> ANI ENHANCED <<                     \033[1;35m │\033[0m\n"
    printf "\033[1;35m│ \033[1;33m                  Created by Andromeda **                  \033[1;35m │\033[0m\n"
    printf "\033[1;35m╰─══════════════════════════════════════════════════════════─╯\033[0m\n"
    printf "\n"
    
    # Show detected player with better detection
    if command -v iina >/dev/null 2>&1 || [ -e "/Applications/IINA.app/Contents/MacOS/iina-cli" ]; then
        printf "\033[1;32m[VIDEO] Player: IINA (Premium macOS Experience) [FAST]\033[0m\n"
        printf "\033[2;37m   • Hardware accelerated • 4K/8K support • Native macOS UI\033[0m\n"
    elif command -v mpv >/dev/null 2>&1; then
        printf "\033[1;33m[VIDEO] Player: MPV (High Performance) [FAST]\033[0m\n"
        printf "\033[2;37m   • Cross-platform • Lightweight • Advanced features\033[0m\n"
        suggest_player_installation
    else
        printf "\033[1;31m[WARNING] Player: VLC (Basic Support) [VIDEO]\033[0m\n"
        printf "\033[2;37m   • Universal compatibility • Basic playback\033[0m\n"
        suggest_player_installation
    fi
    
    show_credits
}

# Always show banner except in history mode
if [ "$search" != "history" ] && [ "$use_external_menu" = "0" ]; then
    show_startup_banner
fi

show_loading_animation "🔧 Checking dependencies" 1
dep_ch "curl" "sed" "grep" || true
[ "$skip_intro" = 1 ] && (dep_ch "ani-skip" || true)
dep_ch "fzf" || true
case "$player_function" in
    debug) ;;
    download) dep_ch "ffmpeg" "aria2c" ;;
    android*) printf "\33[2K\rChecking of players on Android is disabled\n" ;;
    *iSH*) printf "\33[2K\rChecking of players on iOS is disabled\n" ;;
    flatpak_mpv) true ;; # handled out of band in where_mpv
    *) dep_ch "$player_function" ;;
esac

# searching
case "$search" in
    history)
        anime_list=$(while read -r ep_no id title; do process_hist_entry & done <"$histfile")
        wait
        [ -z "$anime_list" ] && die "No unwatched series in history!"
        [ -z "${index##*[!0-9]*}" ] && id=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth ">> Select anime: " | cut -f1)
        [ -z "${index##*[!0-9]*}" ] || id=$(printf "%s" "$anime_list" | sed -n "${index}p" | cut -f1)
        [ -z "$id" ] && exit 1
        title=$(printf "%s" "$anime_list" | grep "$id" | cut -f2 | sed 's/ - episode.*//')
        ep_list=$(episodes_list "$id")
        ep_no=$(printf "%s" "$anime_list" | grep "$id" | cut -f2 | sed -nE 's/.*- episode (.+)$/\1/p')
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        ;;
    *)
        if [ "$use_external_menu" = "0" ]; then
            while [ -z "$query" ]; do
                printf "\033[2;36m════════════════════════════════════════════════════════════════\033[0m\n"
                printf "\033[1;35m🔍 Search for your anime:\033[0m "
                read -r query
                if [ -n "$query" ]; then
                    show_loading_animation "🔎 Searching anime database" 1
                fi
            done
        else
            [ -z "$query" ] && query=$(printf "" | external_menu "" "🔍 Search anime: " "$external_menu_args")
            [ -z "$query" ] && exit 1
        fi
        # for checking new releases by specifying anime name
        [ "$search" = "nextep" ] && time_until_next_ep "$query"

        query=$(printf "%s" "$query" | sed "s| |+|g")
        anime_list=$(search_anime "$query")
        [ -z "$anime_list" ] && die "No results found!"
        [ "$index" -eq "$index" ] 2>/dev/null && result=$(printf "%s" "$anime_list" | sed -n "${index}p")
        [ -z "$index" ] && result=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth ">> Select anime: ")
        [ -z "$result" ] && exit 1
        title=$(printf "%s" "$result" | cut -f2)
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        id=$(printf "%s" "$result" | cut -f1)
        
        # Show anime poster
        clear
        show_anime_poster "$title" "$id"
        
        ep_list=$(episodes_list "$id")
        show_loading_animation "🎬 Loading episode list" 1
        
        if [ -z "$ep_no" ]; then
            # Enhanced episode selection
            ep_no=$(printf "%s" "$ep_list" | nth "[TV] Choose episode: " "$multi_selection_flag")
        fi
        [ -z "$ep_no" ] && exit 1
        ;;
esac
[ "$skip_intro" = 1 ] && mal_id="$(ani-skip -q "${skip_title:-${title}}")"

# moves the cursor up one line and clears that line
tput cuu1 && tput el
# stores the position of cursor
tput sc

# playback & loop (removed - now handled in main loop)

# Main episode playback loop
while true; do
    # Play the current episode
    play
    [ "$player_function" = "download" ] || [ "$player_function" = "debug" ] && exit 0
    
    # Clear screen and show completion animation
    clear
    printf "\n\033[1;32m╭─════════════════════════════════════════════════════════════─╮\033[0m\n"
            printf "\033[1;32m│ \033[1;36m                 ** EPISODE COMPLETED! **                   \033[1;32m │\033[0m\n"
    printf "\033[1;32m│ \033[1;33m               Episode %s finished successfully              \033[1;32m │\033[0m\n" "$ep_no"
    printf "\033[1;32m╰─════════════════════════════════════════════════════════════─╯\033[0m\n\n"
    
    # Create menu options for FZF
    menu_options="Next Episode - Continue your anime journey
Replay Episode - Watch this episode again
Previous Episode - Go back one episode
Select Episode - Choose any episode
Change Quality - Adjust video quality
Add to Favorites - Save this anime
Add to Watchlist - Track your progress
Watch Later - Save for another time
Add Note - Write thoughts about this episode
View Dashboard - See your anime statistics
Quit - Exit ANI Enhanced"
    
    # Show FZF menu with proper formatting
    menu_choice=$(printf "%s" "$menu_options" | fzf \
        --reverse --cycle \
        --prompt "What's next? > " \
        --height=60% --border=rounded --margin=1,3 --padding=1,2 \
        --color=fg:#ffffff,bg:#0a0a0a,hl:#ff6b9d,fg+:#ffffff,bg+:#1a1a2e,hl+:#ff9f43 \
        --color=info:#00d9ff,prompt:#ff6b9d,pointer:#ff9f43,marker:#00d9ff \
        --color=spinner:#ff6b9d,header:#00d9ff,border:#333366 \
                    --header=">> Episode $ep_no Complete - Choose Your Next Action <<" \
        --pointer=">" \
        --marker="*" \
        --ansi)
        
    # Handle the menu selection
    case "$menu_choice" in
        "Next Episode"*)
            show_loading_animation "⏭️ Loading next episode" 1
            new_ep=$(printf "%s" "$ep_list" | sed -n "/^${ep_no}$/{n;p;}") 2>/dev/null
            [ -n "$new_ep" ] && ep_no="$new_ep" || die "No more episodes available!"
            ;;
        "Replay Episode"*)
            show_loading_animation "[RELOAD] Reloading episode" 1
            # ep_no stays the same for replay
            ;;
        "Previous Episode"*)
            show_loading_animation "⏮️ Loading previous episode" 1
            prev_ep=$(printf "%s" "$ep_list" | sed -n "/^${ep_no}$/{g;1!p;};h") 2>/dev/null
            [ -n "$prev_ep" ] && ep_no="$prev_ep" || die "This is the first episode!"
            ;;
        "Select Episode"*)
            show_loading_animation "[TV] Opening episode browser" 1
            selected_ep=$(printf "%s" "$ep_list" | nth "[TV] Choose episode: " "$multi_selection_flag")
            [ -n "$selected_ep" ] && ep_no="$selected_ep" || continue
            ;;
        "Change Quality"*)
            show_loading_animation "[SETTINGS] Opening quality menu" 1
            quality_menu=$(printf "%s" "$links" | sed 's/>/p - /g; s/^/[HD] /g; s/$/  [Premium Quality]/g')
            new_quality="$(printf "%s" "$quality_menu" | launcher "Select quality: " | sed 's/\[HD\] //g; s/p - .*//g')"
            [ -n "$new_quality" ] && select_quality "$new_quality"
            continue  # Stay on same episode
            ;;
        "Add to Favorites"*)
            add_to_favorites "$id" "$title" 5
            printf "\n\033[1;32m[STAR] Added to favorites!\033[0m\n"
            sleep 2
            continue  # Stay on same episode
            ;;
        "Add to Watchlist"*)
            add_to_watchlist "$id" "$title" "watching"
            printf "\n\033[1;32m[LIST] Added to watchlist!\033[0m\n"
            sleep 2
            continue  # Stay on same episode
            ;;
        "Watch Later"*)
            add_to_watch_later "$id" "$title" "$ep_no"
            printf "\n\033[1;32m[LATER] Added to watch later!\033[0m\n"
            sleep 2
            continue  # Stay on same episode
            ;;
        "Add Note"*)
            printf "\n\033[1;36m📝 Write your note for Episode %s:\033[0m " "$ep_no"
            read -r note
            [ -n "$note" ] && add_episode_note "$id" "$ep_no" "$note"
            printf "\n\033[1;32m[NOTE] Note added!\033[0m\n"
            sleep 2
            continue  # Stay on same episode
            ;;
        "View Dashboard"*)
            clear
            show_stats_dashboard
            printf "\n\033[2;37mPress Enter to continue...\033[0m"
            read -r
            continue  # Stay on same episode
            ;;
        "Quit"*|"")
            clear
            typewriter_effect ">> Thanks for using ANI Enhanced! **" 0.04
            printf "\n\033[1;35m╭─══════════════════════════════════════════════════════════─╮\033[0m\n"
            printf "\033[1;35m│ \033[1;36m              See you next time, anime lover! **           \033[1;35m │\033[0m\n"
            printf "\033[1;35m╰─══════════════════════════════════════════════════════════─╯\033[0m\n"
            show_credits
            printf "\n"
            exit 0 
            ;;
        *)
            # If user cancels FZF or something goes wrong, quit gracefully
            printf "\n\033[1;33m** See you next time!\033[0m\n"
            exit 0
            ;;
    esac
done

# ==================== NEW UNIQUE FEATURES ====================

# Watchlist management system
watchlist_file="$hist_dir/watchlist"
favorites_file="$hist_dir/favorites"
watch_later_file="$hist_dir/watch_later"
[ ! -f "$watchlist_file" ] && : >"$watchlist_file"
[ ! -f "$favorites_file" ] && : >"$favorites_file"
[ ! -f "$watch_later_file" ] && : >"$watch_later_file"

# Add anime to watchlist with status
add_to_watchlist() {
    local anime_id="$1"
    local anime_name="$2"
    local status="${3:-watching}"
    local timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
    
    if ! grep -q "^$anime_id" "$watchlist_file"; then
        printf "%s\t%s\t%s\t%s\n" "$anime_id" "$anime_name" "$status" "$timestamp" >> "$watchlist_file"
        printf "\033[1;32m[OK]\033[0m Added to watchlist: %s\n" "$anime_name"
    else
        printf "\033[1;33m!\033[0m Already in watchlist\n"
    fi
}

# Show watchlist with status
show_watchlist() {
    if [ ! -s "$watchlist_file" ]; then
        printf "\033[1;33mYour watchlist is empty!\033[0m\n"
        exit 0
    fi
    
    printf "\033[1;35m╭───────────────────────────────────────────────────────────╮\033[0m\n"
    printf "\033[1;35m│\033[1;36m                    >> MY WATCHLIST <<                    \033[1;35m│\033[0m\n"
    printf "\033[1;35m╰───────────────────────────────────────────────────────────╯\033[0m\n\n"
    
    while IFS=$'\t' read -r id name status timestamp; do
        case "$status" in
                    watching) icon="[TV]" color="32" ;;
        completed) icon="[DONE]" color="36" ;;
        on_hold) icon="[PAUSE]" color="33" ;;
        dropped) icon="[DROP]" color="31" ;;
            *) icon="[LIST]" color="37" ;;
        esac
        printf "%s \033[1;%sm%-40s\033[0m (%s)\n" "$icon" "$color" "$name" "$status"
    done < "$watchlist_file"
}

# Mark anime as completed/dropped/on-hold
update_watchlist_status() {
    local anime_id="$1"
    local new_status="$2"
    
    if grep -q "^$anime_id" "$watchlist_file"; then
        sed -i.bak "s/^$anime_id\t\([^\t]*\)\t[^\t]*\t/&$new_status\t/" "$watchlist_file"
        printf "\033[1;32m[OK]\033[0m Status updated to: %s\n" "$new_status"
    fi
}

# Add to favorites
add_to_favorites() {
    local anime_id="$1"
    local anime_name="$2"
    local rating="${3:-5}"
    local timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
    
    if ! grep -q "^$anime_id" "$favorites_file"; then
        printf "%s\t%s\t%s\t%s\n" "$anime_id" "$anime_name" "$rating" "$timestamp" >> "$favorites_file"
        printf "\033[1;31m[HEART]\033[0m Added to favorites: %s (*%s)\n" "$anime_name" "$rating"
    else
        printf "\033[1;33m!\033[0m Already in favorites\n"
    fi
}

# Show favorites
show_favorites() {
    if [ ! -s "$favorites_file" ]; then
        printf "\033[1;33mYour favorites list is empty!\033[0m\n"
        exit 0
    fi
    
    printf "\033[1;31m╭───────────────────────────────────────────────────────────╮\033[0m\n"
    printf "\033[1;31m│\033[1;36m                   >> MY FAVORITES <<                     \033[1;31m│\033[0m\n"
    printf "\033[1;31m╰───────────────────────────────────────────────────────────╯\033[0m\n\n"
    
    while IFS=$'\t' read -r id name rating timestamp; do
        stars=""
        for i in $(seq 1 $rating); do stars="${stars}★"; done
        printf "%-40s \033[1;33m%s\033[0m\n" "$name" "$stars"
    done < "$favorites_file" | sort -k2 -r
}

# Watch later queue
add_to_watch_later() {
    local anime_id="$1"
    local anime_name="$2"
    local episode="${3:-1}"
    local timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
    
    printf "%s\t%s\t%s\t%s\n" "$anime_id" "$anime_name" "$episode" "$timestamp" >> "$watch_later_file"
    printf "\033[1;36m[LATER]\033[0m Added to watch later: %s (Episode %s)\n" "$anime_name" "$episode"
}

# Show watch later queue
show_watch_later() {
    if [ ! -s "$watch_later_file" ]; then
        printf "\033[1;33mYour watch later queue is empty!\033[0m\n"
        exit 0
    fi
    
    printf "\033[1;36m╭───────────────────────────────────────────────────────────╮\033[0m\n"
    printf "\033[1;36m│\033[1;36m                  >> WATCH LATER QUEUE <<                  \033[1;36m│\033[0m\n"
    printf "\033[1;36m╰───────────────────────────────────────────────────────────╯\033[0m\n\n"
    
    while IFS=$'\t' read -r id name episode timestamp; do
        printf "[LATER] %-35s Episode %s\n" "$name" "$episode"
    done < "$watch_later_file"
}

# Quick stats dashboard
show_stats_dashboard() {
    local total_watched=$(grep -c "watching\|completed" "$watchlist_file" 2>/dev/null || echo 0)
    local completed=$(grep -c "completed" "$watchlist_file" 2>/dev/null || echo 0)
    local favorites=$(wc -l < "$favorites_file" 2>/dev/null || echo 0)
    local watch_later=$(wc -l < "$watch_later_file" 2>/dev/null || echo 0)
    
    printf "\033[1;35m╭───────────────────────────────────────────────────────────╮\033[0m\n"
    printf "\033[1;35m│\033[1;36m                  >> ANI-CLI DASHBOARD <<                  \033[1;35m│\033[0m\n"
    printf "\033[1;35m╰───────────────────────────────────────────────────────────╯\033[0m\n\n"
    printf "[TV] Total Anime Watched: \033[1;32m%s\033[0m\n" "$total_watched"
    printf "[DONE] Completed Series: \033[1;36m%s\033[0m\n" "$completed"
    printf "[HEART] Favorites: \033[1;31m%s\033[0m\n" "$favorites"
    printf "[LATER] Watch Later Queue: \033[1;33m%s\033[0m\n" "$watch_later"
    printf "\n"
    
    # Show recent activity
    if [ -s "$histfile" ]; then
        printf "\033[1;34m📅 Recent Activity:\033[0m\n"
        tail -5 "$histfile" | while IFS=$'\t' read -r ep id title; do
            printf "   • %s - Episode %s\n" "$(echo "$title" | sed 's/[0-9]* episodes//')" "$ep"
        done
    fi
}

# Enhanced episode tracking with notes
add_episode_note() {
    local anime_id="$1"
    local episode="$2"
    local note="$3"
    local notes_file="$hist_dir/notes/${anime_id}.notes"
    
    mkdir -p "$hist_dir/notes"
    printf "%s\t%s\t%s\n" "$episode" "$(date '+%Y-%m-%d %H:%M')" "$note" >> "$notes_file"
    printf "\033[1;32m[OK]\033[0m Note added for episode %s\n" "$episode"
}

# Show episode notes
show_episode_notes() {
    local anime_id="$1"
    local notes_file="$hist_dir/notes/${anime_id}.notes"
    
    if [ -f "$notes_file" ] && [ -s "$notes_file" ]; then
        printf "\033[1;33m📝 Episode Notes:\033[0m\n"
        while IFS=$'\t' read -r ep timestamp note; do
            printf "   Episode %s (%s): %s\n" "$ep" "$timestamp" "$note"
        done < "$notes_file"
    fi
}

# ani-cli
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Project repository: https://github.com/pystardust/ani-cli
